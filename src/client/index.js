// Generated by CoffeeScript 2.5.1
var brownish, dat, dirtID, getVoxelID, grassID, greenish, h, mesh, noa, player, scene, socket, textureURL, w;

import Engine from 'noa-engine';

import {
  io
} from 'socket.io-client';

socket = io(":8081");

socket.on("connect", function() {
  console.log("connected");
  socket.emit("initClient", "noaPlayer");
  return socket.on("disconnect", function() {
    return console.log("disconnected");
  });
});

noa = new Engine({
  debug: true,
  showFPS: true,
  chunkSize: 16,
  chunkAddDistance: 6,
  chunkRemoveDistance: 6,
  useAO: true
});

textureURL = null;

brownish = [0.45, 0.36, 0.22];

greenish = [0.1, 0.8, 0.2];

noa.registry.registerMaterial('dirt', brownish, textureURL);

noa.registry.registerMaterial('grass', greenish, textureURL);

dirtID = noa.registry.registerBlock(1, {
  material: 'dirt'
});

grassID = noa.registry.registerBlock(2, {
  material: 'grass'
});

getVoxelID = function(x, y, z) {
  var height;
  if (y < -3) {
    return dirtID;
  }
  height = 2 * Math.sin(x / 10) + 3 * Math.cos(z / 20);
  if (y < height) {
    return grassID;
  }
  return 0;
};

noa.world.on('worldDataNeeded', function(id, data, x, y, z) {
  var i, j, k, l, m, n, ref, ref1, ref2, voxelID;
  for (i = l = 0, ref = data.shape[0] - 1; (0 <= ref ? l <= ref : l >= ref); i = 0 <= ref ? ++l : --l) {
    for (j = m = 0, ref1 = data.shape[1] - 1; (0 <= ref1 ? m <= ref1 : m >= ref1); j = 0 <= ref1 ? ++m : --m) {
      for (k = n = 0, ref2 = data.shape[2] - 1; (0 <= ref2 ? n <= ref2 : n >= ref2); k = 0 <= ref2 ? ++n : --n) {
        voxelID = getVoxelID(x + i, y + j, z + k);
        data.set(i, j, k, voxelID);
      }
    }
  }
  noa.world.setChunkData(id, data);
});

player = noa.playerEntity;

dat = noa.entities.getPositionData(player);

w = dat.width;

h = dat.height;

import {
  Mesh
} from '@babylonjs/core/Meshes/mesh';

import '@babylonjs/core/Meshes/Builders/boxBuilder';

scene = noa.rendering.getScene();

mesh = Mesh.CreateBox('player-mesh', 1, scene);

mesh.scaling.x = w;

mesh.scaling.z = w;

mesh.scaling.y = h;

noa.entities.addComponent(player, noa.entities.names.mesh, {
  mesh: mesh,
  offset: [0, h / 2, 0]
});

noa.inputs.down.on('fire', function() {
  if (noa.targetedBlock) {
    noa.setBlock(0, noa.targetedBlock.position);
  }
});

noa.inputs.down.on('alt-fire', function() {
  if (noa.targetedBlock) {
    noa.addBlock(grassID, noa.targetedBlock.adjacent);
  }
});

noa.inputs.bind('alt-fire', 'E');

noa.on('tick', function(dt) {
  var scroll;
  scroll = noa.inputs.state.scrolly;
  if (scroll !== 0) {
    noa.camera.zoomDistance += scroll > 0 ? 1 : -1;
    if (noa.camera.zoomDistance < 0) {
      noa.camera.zoomDistance = 0;
    }
    if (noa.camera.zoomDistance > 10) {
      noa.camera.zoomDistance = 10;
    }
  }
});
