// Generated by CoffeeScript 2.5.1
var brownish, dat, dirtID, grassID, greenish, h, mesh, noa, player, scene, socket, textureURL, w, world;

import Engine from 'noa-engine';

import {
  io
} from 'socket.io-client';

import {
  Mesh
} from '@babylonjs/core/Meshes/mesh';

import '@babylonjs/core/Meshes/Builders/boxBuilder';

import {
  World
} from "./World";

import * as BABYLON from '@babylonjs/core/Legacy/legacy';

socket = io(":8081");

noa = new Engine({
  debug: true,
  showFPS: true,
  chunkSize: 16,
  playerStart: [0.5, 100, 0.5],
  chunkAddDistance: 6,
  chunkRemoveDistance: 6,
  useAO: true,
  manuallyControlChunkLoading: true
});

world = new World(noa);

socket.on("connect", function() {
  console.log("connected");
  socket.emit("initClient", "noaPlayer");
  socket.on("mapChunk", function(chunk, x, z) {
    world.loadChunk(chunk, x, z);
  });
  socket.on("disconnect", function() {
    console.log("disconnected");
  });
});

textureURL = null;

brownish = [0.45, 0.36, 0.22];

greenish = [0.1, 0.8, 0.2];

noa.registry.registerMaterial('dirt', brownish, textureURL);

noa.registry.registerMaterial('grass', greenish, textureURL);

dirtID = noa.registry.registerBlock(1, {
  material: 'dirt'
});

grassID = noa.registry.registerBlock(2, {
  material: 'grass'
});

player = noa.playerEntity;

dat = noa.entities.getPositionData(player);

w = dat.width;

h = dat.height;

scene = noa.rendering.getScene();

scene.fogMode = BABYLON.Scene.FOGMODE_LINEAR;

scene.fogStart = 4 * 16;

scene.fogEnd = 5 * 16;

scene.fogColor = new BABYLON.Color3(204 / 255, 232 / 255, 255 / 255);

mesh = Mesh.CreateBox('player-mesh', 1, scene);

mesh.scaling.x = w;

mesh.scaling.z = w;

mesh.scaling.y = h;

noa.entities.addComponent(player, noa.entities.names.mesh, {
  mesh: mesh,
  offset: [0, h / 2, 0]
});

noa.inputs.down.on('fire', function() {
  if (noa.targetedBlock) {
    noa.setBlock(0, noa.targetedBlock.position);
  }
});

noa.inputs.down.on('alt-fire', function() {
  if (noa.targetedBlock) {
    noa.addBlock(grassID, noa.targetedBlock.adjacent);
  }
});

noa.inputs.bind('alt-fire', 'E');

noa.on('tick', function(dt) {
  var scroll;
  scroll = noa.inputs.state.scrolly;
  if (scroll !== 0) {
    noa.camera.zoomDistance += scroll > 0 ? 1 : -1;
    if (noa.camera.zoomDistance < 0) {
      noa.camera.zoomDistance = 0;
    }
    if (noa.camera.zoomDistance > 10) {
      noa.camera.zoomDistance = 10;
    }
  }
});
