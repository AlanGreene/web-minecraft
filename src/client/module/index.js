// Generated by CoffeeScript 2.5.1
var Game;

import * as THREE from './build/three.module.js';

import {
  SkeletonUtils
} from './jsm/utils/SkeletonUtils.js';

import Stats from './jsm/libs/stats.module.js';

import {
  World
} from './World/World.js';

import {
  FirstPersonControls
} from './FirstPersonControls.js';

import {
  gpuInfo
} from './gpuInfo.js';

import {
  AssetLoader
} from './AssetLoader.js';

import {
  InventoryBar
} from './InventoryBar.js';

import {
  RandomNick
} from './RandomNick.js';

import {
  GUI
} from './jsm/libs/dat.gui.module.js';

import {
  Chat
} from './Chat.js';

import {
  Entities
} from './Entities.js';

import {
  PlayerInInventory
} from './PlayerInInventory.js';

Game = class Game {
  constructor(options) {
    var _this, color, directionalLight, eventMap, far, gui, i, near;
    _this = this;
    this.al = options.al;
    this.canvas = document.querySelector('#c');
    this.pcanvas = document.querySelector('#c_player');
    this.pii = new PlayerInInventory({
      canvas: this.pcanvas,
      al: this.al
    });
    this.renderer = new THREE.WebGLRenderer({
      canvas: this.canvas,
      PixelRatio: window.devicePixelRatio
    });
    this.scene = new THREE.Scene();
    this.scene.background = new THREE.Color("#adc8ff");
    this.camera = new THREE.PerspectiveCamera(70, 2, 0.1, 1000);
    this.camera.rotation.order = "YXZ";
    this.camera.position.set(26, 26, 26);
    this.scene.add(new THREE.AmbientLight(0xcccccc));
    directionalLight = new THREE.DirectionalLight(0x333333, 2);
    directionalLight.position.set(1, 1, 0.5).normalize();
    this.scene.add(directionalLight);
    console.warn(gpuInfo());
    this.nick = document.location.hash.substring(1, document.location.hash.length);
    if (this.nick === "") {
      this.nick = RandomNick();
      document.location.href = `\#${this.nick}`;
    }
    this.ent = new Entities({
      scene: this.scene,
      nick: this.nick,
      TWEEN
    });
    this.stats = new Stats();
    this.stats.showPanel(0);
    document.body.appendChild(this.stats.dom);
    this.world = new World({
      toxelSize: 27,
      cellSize: 16,
      scene: this.scene,
      camera: this.camera,
      al: this.al,
      renderer: this.renderer
    });
    this.socket = io.connect(`${document.location.host}`);
    this.FPC = new FirstPersonControls({
      canvas: this.canvas,
      camera: this.camera,
      socket: this.socket,
      TWEEN,
      fov: 70,
      pii: this.pii
    });
    this.chat = new Chat({
      FPC: this.FPC
    });
    this.inv_bar = new InventoryBar();
    eventMap = {
      "connect": function() {
        console.log("Połączono z serverem!");
        $('.loadingText').text("Za chwilę dołączysz do gry...");
        console.log(`User nick: ${_this.nick}`);
        _this.socket.emit("initClient", {
          nick: _this.nick
        });
      },
      "blockUpdate": function(block) {
        _this.world.setBlock(block[0], block[1] + 16, block[2], block[3]);
      },
      "spawn": function(yaw, pitch) {
        console.log("Gracz dołączył do gry!");
        $(".initLoading").css("display", "none");
        _this.camera.rotation.y = yaw;
        _this.camera.rotation.x = pitch;
      },
      "mapChunk": function(sections, x, z, biomes) {
        _this.world._computeSections(sections, x, z, biomes);
      },
      "hp": function(points) {
        _this.inv_bar.setHp(points);
      },
      "inventory": function(inv) {
        _this.inv_bar.updateInv(inv);
      },
      "food": function(points) {
        _this.inv_bar.setFood(points);
      },
      "msg": function(msg) {
        _this.chat.log(msg);
      },
      "kicked": function(reason) {
        _this.chat.log("You have been kicked!");
      },
      "xp": function(xp) {
        _this.inv_bar.setXp(xp.level, xp.progress);
      },
      "move": function(pos) {
        var to;
        to = {
          x: pos.x - 0.5,
          y: pos.y + 17,
          z: pos.z - 0.5
        };
        new TWEEN.Tween(_this.camera.position).to(to, 100).easing(TWEEN.Easing.Quadratic.Out).start();
      },
      "entities": function(entities) {
        return _this.ent.update(entities);
      }
    };
    for (i in eventMap) {
      this.socket.on(i, eventMap[i]);
    }
    this.cursor = new THREE.LineSegments(new THREE.EdgesGeometry(new THREE.BoxGeometry(1, 1, 1)), new THREE.LineBasicMaterial({
      color: 0x000000,
      linewidth: 0.5
    }));
    this.scene.add(this.cursor);
    gui = new GUI();
    this.params = {
      fog: false,
      chunkdist: 3
    };
    color = new THREE.Color("#adc8ff");
    near = 0.5 * 16;
    far = 2.5 * 16;
    // scene.fog = new THREE.Fog color, near, far
    gui.add(this.params, 'fog').name('Enable fog').listen().onChange(function() {
      if (_this.params.fog) {
        return _this.scene.fog = new THREE.Fog(color, near, far);
      } else {
        return _this.scene.fog = null;
      }
    });
    gui.add(this.world.material, 'wireframe').name('Wireframe').listen();
    gui.add(this.params, 'chunkdist', 0, 10, 1).name('Render distance').listen();
    $(document).mousedown(function(e) {
      if (_this.FPC.gameState === "gameLock") {
        console.log(_this.world.cellTerrain.getBlock(..._this.world.getRayBlock().posBreak));
      }
    });
    this.animate();
  }

  animate() {
    var _this;
    _this = this;
    if (this.stats !== null) {
      this.stats.begin();
      this.render();
      this.stats.end();
    }
    requestAnimationFrame(function() {
      return _this.animate();
    });
  }

  render() {
    var height, pos, rayBlock, width;
    width = window.innerWidth;
    height = window.innerHeight;
    if (this.canvas.width !== width || this.canvas.height !== height) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.renderer.setSize(width, height, false);
      this.camera.aspect = width / height;
      this.camera.updateProjectionMatrix();
    }
    rayBlock = this.world.getRayBlock();
    if (rayBlock) {
      pos = rayBlock.posBreak;
      this.cursor.position.set(...pos);
      this.cursor.visible = true;
    } else {
      this.cursor.visible = false;
    }
    this.world.updateCellsAroundPlayer(this.camera.position, this.params.chunkdist);
    TWEEN.update();
    this.renderer.render(this.scene, this.camera);
    if (this.FPC.gameState === "inventory") {
      this.pii.render();
    }
    this.inv_bar.tick();
  }

};

new AssetLoader(function(al) {
  new Game({al});
});
