// Generated by CoffeeScript 2.5.1
var State, TerrainManager, handlers, terrain, time;

import {
  CellTerrain
} from './CellTerrain.js';

import {
  BlockGeo
} from './BlockGeo.js';

console.log("CHUNK WORKER STARTED!");

TerrainManager = class TerrainManager {
  constructor(options) {
    this.cellSize = options.cellSize;
    this.cellTerrain = new CellTerrain({
      cellSize: this.cellSize
    });
    this.BlockGeo = new BlockGeo({
      toxelSize: options.toxelSize,
      blocksMapping: options.blocksMapping
    });
  }

  genCellGeo(cellX, cellY, cellZ) {
    var _this, addFace, colors, i, j, k, l, m, n, normals, pos, positions, ref, ref1, ref2, uvs;
    _this = this;
    positions = [];
    normals = [];
    uvs = [];
    colors = [];
    addFace = function(type, pos) {
      var faceVertex;
      faceVertex = _this.BlockGeo.genBlockFace(type, _this.cellTerrain.getBlock(...pos), pos);
      positions.push(...faceVertex.pos);
      normals.push(...faceVertex.norm);
      uvs.push(...faceVertex.uv);
      colors.push(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5);
    };
    for (i = l = 0, ref = this.cellSize - 1; (0 <= ref ? l <= ref : l >= ref); i = 0 <= ref ? ++l : --l) {
      for (j = m = 0, ref1 = this.cellSize - 1; (0 <= ref1 ? m <= ref1 : m >= ref1); j = 0 <= ref1 ? ++m : --m) {
        for (k = n = 0, ref2 = this.cellSize - 1; (0 <= ref2 ? n <= ref2 : n >= ref2); k = 0 <= ref2 ? ++n : --n) {
          pos = [cellX * this.cellSize + i, cellY * this.cellSize + j, cellZ * this.cellSize + k];
          if (this.cellTerrain.getBlock(...pos).boundingBox === "block") {
            if (this.cellTerrain.getBlock(pos[0] + 1, pos[1], pos[2]).boundingBox !== "block") {
              addFace("nx", pos);
            }
            if (this.cellTerrain.getBlock(pos[0] - 1, pos[1], pos[2]).boundingBox !== "block") {
              addFace("px", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1] - 1, pos[2]).boundingBox !== "block") {
              addFace("ny", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1] + 1, pos[2]).boundingBox !== "block") {
              addFace("py", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1], pos[2] + 1).boundingBox !== "block") {
              addFace("pz", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1], pos[2] - 1).boundingBox !== "block") {
              addFace("nz", pos);
            }
          } else if (this.cellTerrain.getBlock(...pos).name === "water") {
            if (this.cellTerrain.getBlock(pos[0] + 1, pos[1], pos[2]).name === "air") {
              addFace("nx", pos);
            }
            if (this.cellTerrain.getBlock(pos[0] - 1, pos[1], pos[2]).name === "air") {
              addFace("px", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1] - 1, pos[2]).name === "air") {
              addFace("ny", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1] + 1, pos[2]).name === "air") {
              addFace("py", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1], pos[2] + 1).name === "air") {
              addFace("pz", pos);
            }
            if (this.cellTerrain.getBlock(pos[0], pos[1], pos[2] - 1).name === "air") {
              addFace("nz", pos);
            }
          }
        }
      }
    }
    return {positions, normals, uvs, colors};
  }

};

addEventListener("message", function(e) {
  var fn;
  fn = handlers[e.data.type];
  if (!fn) {
    throw new Error('no handler for type: ' + e.data.type);
  }
  fn(e.data.data);
});

State = {
  init: null,
  world: {}
};

terrain = null;

time = 0;

handlers = {
  init: function(data) {
    State.init = data;
    terrain = new TerrainManager({
      models: data.models,
      blocks: data.blocks,
      blocksMapping: data.blocksMapping,
      toxelSize: data.toxelSize,
      cellSize: data.cellSize
    });
  },
  setVoxel: function(data) {
    return terrain.cellTerrain.setVoxel(...data);
  },
  genCellGeo: function(data) {
    var geo;
    if (((terrain.cellTerrain.vec3(...data)) in terrain.cellTerrain.cells) === true) {
      geo = terrain.genCellGeo(...data);
      return postMessage({
        cell: geo,
        info: data
      });
    }
  },
  setCell: function(data) {
    terrain.cellTerrain.setCell(data[0], data[1], data[2], data[3]);
    return terrain.cellTerrain.setBiome(data[0], data[1], data[2], data[4]);
  }
};
