// Generated by CoffeeScript 2.5.1
var Player;

import TWEEN from "@tweenjs/tween.js";

import {
  Mesh
} from '@babylonjs/core/Meshes/mesh';

import '@babylonjs/core/Meshes/Builders/boxBuilder';

Player = class Player {
  constructor(noa) {
    var _this, animate, dat, h, mesh, w;
    _this = this;
    this.noa = noa;
    this.player = this.noa.playerEntity;
    this.scene = this.noa.rendering.getScene();
    this.scene.cameras[0].fov = 1;
    dat = noa.entities.getPositionData(this.player);
    w = dat.width;
    h = dat.height;
    mesh = Mesh.CreateBox('player-mesh', 0, this.scene);
    mesh.scaling.x = w;
    mesh.scaling.z = w;
    mesh.scaling.y = h;
    this.noa.entities.addComponent(this.player, this.noa.entities.names.mesh, {
      mesh: mesh,
      offset: [0, h / 2, 0]
    });
    this.body = this.noa.physics.bodies[0];
    animate = function(time) {
      requestAnimationFrame(animate);
      _this.resetForces();
      TWEEN.update(time);
    };
    requestAnimationFrame(animate);
    return;
  }

  updatePosition(x, y, z) {
    var _this, data_from, data_to, pos, tw;
    _this = this;
    pos = this.noa.entities.getPosition(this.player);
    data_from = {
      x: pos[0],
      y: pos[1],
      z: pos[2]
    };
    data_to = {
      x: -x,
      y,
      z
    };
    tw = new TWEEN.Tween(data_from).to(data_to, 50).easing(TWEEN.Easing.Quadratic.Out).onUpdate(function() {
      // console.log [data_from.x,data_from.y,data_from.z]
      _this.noa.entities.setPosition(_this.player, [data_from.x, data_from.y, data_from.z]);
    }).start();
  }

  updateFov(type, toggle) {
    if (type === "sprint") {
      if (toggle) {
        return new TWEEN.Tween(this.scene.cameras[0]).to({
          fov: 1.2
        }, 200).easing(TWEEN.Easing.Quadratic.Out).start();
      } else {
        return new TWEEN.Tween(this.scene.cameras[0]).to({
          fov: 1
        }, 200).easing(TWEEN.Easing.Quadratic.Out).start();
      }
    }
  }

  resetForces() {
    this.body.velocity[0] = 0;
    this.body.velocity[1] = 0;
    this.body.velocity[2] = 0;
    this.body._forces[0] = 0;
    this.body._forces[1] = 0;
    this.body._forces[2] = 0;
    this.body._impulses[0] = 0;
    this.body._impulses[1] = 0;
    this.body._impulses[2] = 0;
    this.body.gravityMultiplier = 0;
  }

};

export {
  Player
};
