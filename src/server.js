// Generated by CoffeeScript 2.5.1
(function() {
  module.exports = function(config) {
    var Chunk, app, express, fs, http, io, mineflayer, players, port, restoreWorld, saveWorld, server, sf, socketInfo, vec3, world;
    fs = require("fs");
    http = require("http");
    server = http.createServer();
    io = require("socket.io")(server);
    express = require('express');
    app = express();
    mineflayer = require('mineflayer');
    Chunk = require("prismarine-chunk")("1.16.1");
    vec3 = require("vec3");
    sf = {};
    port = config["express-port"];
    world = {};
    //Zapisywanie i odczytywanie Å›wiata
    saveWorld = function() {
      return fs.writeFileSync(__dirname + "/savedWorld.json", JSON.stringify(world));
    };
    restoreWorld = function() {
      return world = JSON.parse(fs.readFileSync(__dirname + '/savedWorld.json'));
    };
    restoreWorld();
    players = {};
    socketInfo = {};
    app.use(express.static(__dirname + "/client/"));
    app.use(function(req, res, next) {
      res.set('Cache-Control', 'no-store');
      return next();
    });
    app.get("/websocket/", function(req, res) {
      return res.send(String(config["websocket-port"]));
    });
    app.get("/host/", function(req, res) {
      return res.send(String(config["host"]));
    });
    app.listen(port);
    server.listen(config["websocket-port"]);
    //On connect
    return io.sockets.on("connection", function(socket) {
      //Trying to run special functions
      socket.on("initClient", function(data) {
        console.log("NEW: " + socket.id);
        //init socketInfo
        socketInfo[socket.id] = data;
        //socketInfo add Bot
        socketInfo[socket.id].bot = mineflayer.createBot({
          host: config.realServer.ip,
          port: config.realServer.port,
          username: socketInfo[socket.id].nick
        });
        //On recieve real Map Chunk
        socketInfo[socket.id].bot._client.on("map_chunk", function(packet) {
          var cell;
          cell = new Chunk();
          cell.load(packet.chunkData, packet.bitMap, false, true);
          io.to(socket.id).emit("mapChunk", cell.sections, packet.x, packet.z);
        });
        // console.log packet
        socketInfo[socket.id].bot.on('chat', function(username, message) {
          if (username === socketInfo[socket.id].bot.username) {
            return;
          }
          socketInfo[socket.id].bot.chat(message);
        });
        //first world load
        io.to(socket.id).emit("firstLoad", world);
      });
      socket.on("playerUpdate", function(data) {
        players[socket.id] = data;
        return io.sockets.emit("playerUpdate", players);
      });
      socket.on("blockUpdate", function(block) {
        world[`${block[0]}:${block[1]}:${block[2]}`] = block[3];
        if (block[3] === 0) {
          delete world[`${block[0]}:${block[1]}:${block[2]}`];
        }
        io.sockets.emit("blockUpdate", block);
        return saveWorld();
      });
      return socket.on("disconnect", function() {
        console.log("DIS: " + socket.id);
        //end bot session
        socketInfo[socket.id].bot.end();
        //delete socketinfo
        delete players[socket.id];
        delete socketInfo[socket.id];
      });
    });
  };

}).call(this);
