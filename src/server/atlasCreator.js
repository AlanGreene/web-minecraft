// Generated by CoffeeScript 2.5.1
(function() {
  var Canvas, fs, path;

  path = require("path");

  fs = require("fs");

  Canvas = require("canvas");

  module.exports = function(pref, size, xpath, buildPath, totalImages, atlasSize, mini, miniAtlasSize) {
    var Image, addImageToLoad, addToxelToAtlas, canvas, createCanvas, ctx, firstLoad, forEachToxel, images, loadImage, loadedImages, miniMapping, miniX, miniY, moveToxel, textureMapping, toxelX, toxelY, updateAtlas;
    createCanvas = Canvas.createCanvas;
    loadImage = Canvas.loadImage;
    Image = Canvas.Image;
    toxelX = 1;
    toxelY = 1;
    miniX = 1;
    miniY = 1;
    loadedImages = 0;
    if (!fs.existsSync(buildPath)) {
      fs.mkdirSync(buildPath);
    }
    canvas = createCanvas(atlasSize * size, atlasSize * size);
    ctx = canvas.getContext('2d');
    images = {};
    textureMapping = {};
    miniMapping = {};
    firstLoad = function() {
      fs.readdir(xpath, function(err, files) {
        files.forEach(function(file) {
          var filePath;
          filePath = `${xpath}/${file}`;
          if (path.extname(file) === ".png") {
            addImageToLoad(filePath, file);
          }
        });
      });
    };
    addImageToLoad = function(filePath, name) {
      var img;
      img = new Image();
      img.onload = function() {
        images[name] = img;
        loadedImages++;
        if (loadedImages === totalImages) {
          return forEachToxel();
        }
      };
      return img.src = filePath;
    };
    forEachToxel = function() {
      Object.keys(images).forEach(function(name) {
        var img;
        img = images[name];
        return addToxelToAtlas(img, name);
      });
      return updateAtlas();
    };
    addToxelToAtlas = function(img, name) {
      var h, i, j, k, l, ref, ref1, w;
      w = img.width / size;
      h = img.height / size;
      if (w > 1 || h > 1) {
        for (i = k = 0, ref = w - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {
          for (j = l = 0, ref1 = h - 1; (0 <= ref1 ? l <= ref1 : l >= ref1); j = 0 <= ref1 ? ++l : --l) {
            ctx.drawImage(img, i * size, j * size, size, size, (toxelX - 1) * size, (toxelY - 1) * size, size, size);
            textureMapping[name.substr(0, name.length - 4) + `@${i}@${j}`] = {
              x: toxelX,
              y: toxelY
            };
            moveToxel();
          }
        }
      } else {
        ctx.drawImage(img, (toxelX - 1) * size, (toxelY - 1) * size, size, size);
        textureMapping[name.substr(0, name.length - 4)] = {
          x: toxelX,
          y: toxelY
        };
        moveToxel();
      }
      if (mini) {
        miniMapping[name.substr(0, name.length - 4)] = {
          x: miniX,
          y: miniY
        };
        if (miniX === miniAtlasSize) {
          miniX = 1;
          return miniY += 1;
        } else {
          return miniX += 1;
        }
      }
    };
    moveToxel = function() {
      if (toxelX === atlasSize) {
        toxelX = 1;
        return toxelY += 1;
      } else {
        return toxelX += 1;
      }
    };
    updateAtlas = function(path) {
      fs.writeFileSync(`${buildPath}/${pref}Atlas-full.png`, canvas.toBuffer('image/png'));
      console.log(`\x1b[33mSAVING: ${buildPath}/${pref}Atlas-full.png`);
      fs.writeFileSync(`${buildPath}/${pref}Mapping-full.json`, JSON.stringify(textureMapping, null, 2));
      console.log(`\x1b[33mSAVING: ${buildPath}/${pref}Mapping-full.json`);
      if (mini) {
        fs.writeFileSync(`${buildPath}/${pref}Mapping.json`, JSON.stringify(miniMapping, null, 2));
        console.log(`\x1b[33mSAVING: ${buildPath}/${pref}Mapping.json`);
      }
      return console.log(`\x1b[32mSuccessfully created ${canvas.width}x${canvas.height} Texture Atlas!\n\x1b[0m`);
    };
    firstLoad();
  };

}).call(this);
