// Generated by CoffeeScript 2.5.1
(function() {
  var Canvas, Image, addImageToLoad, addToxelToAtlas, atlasSize, buildPath, canvas, createCanvas, ctx, firstLoad, forEachToxel, fs, images, loadImage, loadedImages, miniAtlasSize, miniMapping, miniX, miniY, moveToxel, path, textureMapping, totalImages, toxelX, toxelY, updateAtlas, xpath;

  path = require("path");

  fs = require("fs");

  Canvas = require("canvas");

  createCanvas = Canvas.createCanvas;

  loadImage = Canvas.loadImage;

  Image = Canvas.Image;

  toxelX = 1;

  toxelY = 1;

  miniX = 1;

  miniY = 1;

  totalImages = 694;

  loadedImages = 0;

  atlasSize = 36;

  miniAtlasSize = 27;

  xpath = `${__dirname}/blocks`;

  buildPath = `${__dirname}/../client/static/assets/blocks`;

  canvas = createCanvas(atlasSize * 16, atlasSize * 16);

  ctx = canvas.getContext('2d');

  images = {};

  textureMapping = {};

  miniMapping = {};

  firstLoad = function() {
    fs.readdir(xpath, function(err, files) {
      files.forEach(function(file) {
        var filePath;
        filePath = `${xpath}/${file}`;
        if (path.extname(file) === ".png") {
          addImageToLoad(filePath, file);
        }
      });
    });
  };

  addImageToLoad = function(filePath, name) {
    var img;
    img = new Image();
    img.onload = function() {
      images[name] = img;
      loadedImages++;
      if (loadedImages === totalImages) {
        return forEachToxel();
      }
    };
    return img.src = filePath;
  };

  forEachToxel = function() {
    Object.keys(images).forEach(function(name) {
      var img;
      img = images[name];
      return addToxelToAtlas(img, name);
    });
    return updateAtlas();
  };

  addToxelToAtlas = function(img, name) {
    var h, i, j, k, l, ref, ref1, w;
    w = img.width / 16;
    h = img.height / 16;
    if (w > 1 || h > 1) {
      for (i = k = 0, ref = w - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = h - 1; (0 <= ref1 ? l <= ref1 : l >= ref1); j = 0 <= ref1 ? ++l : --l) {
          ctx.drawImage(img, i * 16, j * 16, 16, 16, (toxelX - 1) * 16, (toxelY - 1) * 16, 16, 16);
          textureMapping[name.substr(0, name.length - 4) + `@${i}@${j}`] = {
            x: toxelX,
            y: toxelY
          };
          moveToxel();
        }
      }
    } else {
      ctx.drawImage(img, (toxelX - 1) * 16, (toxelY - 1) * 16, 16, 16);
      textureMapping[name.substr(0, name.length - 4)] = {
        x: toxelX,
        y: toxelY
      };
      moveToxel();
    }
    miniMapping[name.substr(0, name.length - 4)] = {
      x: miniX,
      y: miniY
    };
    if (miniX === miniAtlasSize) {
      miniX = 1;
      return miniY += 1;
    } else {
      return miniX += 1;
    }
  };

  moveToxel = function() {
    if (toxelX === atlasSize) {
      toxelX = 1;
      return toxelY += 1;
    } else {
      return toxelX += 1;
    }
  };

  updateAtlas = function(path) {
    fs.writeFileSync(`${buildPath}/blocksAtlas-full.png`, canvas.toBuffer('image/png'));
    console.log(`\x1b[33mSAVING: ${buildPath}/blocksAtlas-full.png`);
    fs.writeFileSync(`${buildPath}/blocksMapping-full.json`, JSON.stringify(textureMapping, null, 2));
    console.log(`\x1b[33mSAVING: ${buildPath}/blocksMapping-full.json`);
    fs.writeFileSync(`${buildPath}/blocksMapping.json`, JSON.stringify(miniMapping, null, 2));
    console.log(`\x1b[33mSAVING: ${buildPath}/blocksMapping.json`);
    return console.log(`\x1b[32mSuccessfully created ${canvas.width}x${canvas.height} Texture Atlas!\n`);
  };

  firstLoad();

}).call(this);
